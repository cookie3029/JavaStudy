[day07]

1. 생성자 constructor

	1) 객체가 생성될 때, 객체의 초기화를 위해 실행되는 메서드.
		자바의 모든 클래스는 생성자를 가지고 있으며,
		생성자가 기술 안되어있으면 "기본생성자"가
		눈에 안 보이지만 자동으로 아무것도 없는 형태로
		만들어지고 호출한다.

		자바 초기화는 3가지 방식

	2) 초기화 3가지 방식
		#1. 생성자 : 인스턴스 변수를 초기화 하기 위해 주로 사용

		#2. 초기화 블럭 : 클래스 블럭/ 인스턴스 블럭
			[ 구조 ]
			# 클래스 블럭 : 프로그램시작시 초기화 해줄때
			static {
				// 초기화에 필요한 코드들...
			}
			# 인스턴스 블럭 : 객체 생성시 초기화 해줄때
			{
				// 초기화에 필요한 코드들...
			}
	
		#3. 명시적 초기화
			int a = 10;

	3) 생성자 선언 및 활용
		#1. 객체가 생성되는 순간에 new를 통해 자동으로 한번 호출된다.
			재호출 불가능. (반면 메서드는 필요할때마다 호출 가능)
		#2. 생성자의 이름은 반드시 클래스 이름과 동일
		#3. 리턴타입 지정 불가
			return; 키워드 이용하여 상황에 따라 강제 종료는 가능
		#4. 매개변수 지정 가능
		#5. 생성자는 오버로딩 할 수 있다.
		#6. 목적은 객체 생성시, 필요한 초기 작업을 위함이다.
			변수값 초기화, 필요한 메모리 확보, 파일 열기,
			네트워크 연결등 객체 활동전 필요한 초기 준비시 이용.

	4) 생성자 구조
		클래스명() {
			// 초기화 코드들...
		}

2. 기본생성자 default constructor
	
	1) 매개변수가 없는 생성자를 칭함
		클래스명() {}
	
	2) 클래스는 생성자가 하나 이상은 반드시 존재한다.
		객체 생성시 반드시 한번 실행 된다.
		클래스에 명시된 생성자가 하나도 없으면
		컴파일러가 자동으로 내용없는 기본생성자를 추가한다.

3. this 레퍼런스

	1) 객체 자기 자신을 가르키는 레퍼런스 이다.
	2) 인스턴스 메서드나 생성자에서 사용됨.
	3) this 필요성
		#1. 지역변수나 매개변수와 인스턴스 변수의 이름이 같을 경우
			구별하려는 목적으로 사용
		#2. 메서드가 객체 자기자신의 레퍼런스를 리턴해야하는 경우 사용

4. this()

	1) 클래스내 생성자 안에서 다른 생성자를 호출할 때 사용
	2) 생성자 안에서만 사용 가능한 메서드
	3) 생성자 안에서 다른 생성자의 기능이 필요할 때 사용
	4) 생성자가 두 개 이상일 경우 사용 가능 (생성자 오버로딩)
	5) 다른 생성자 호출시, 반드시 생성자의 첫번째 명령문이 되어야 한다.\
	6) 코드 재사용성을 높이는 방법 중 하나.

5. 객체 배열

	1) 배열은 기본타입뿐만 아니라, 객체를 원소로 하는 객체 배열도 만들 수 있다.
	2) 객체에 대한 레퍼런스(주소)를 배열의 요소로 갖는 것.

	3) 배열 선언 및 생성
		#1. 배열에 대한 레퍼런스 변수 선언
			int [] arr;
			클래스명 [] 변수명;

		#2. 배열 공간 만들기 (까먹지 말기)
			변수명 = new 클래스명[방크기];

		#3. 객체 생성 (배열안에 요소로 채우기)
			변수명[0] = new 클래스명();
			for(int i = 0; i < 변수명.length; i++) {
				변수명[i] = new 클래스명();
			}

	4) 배열안 객체의 요소에 접근
		배열변수명[인덱스].변수명
		배열변수명[인덱스].메서드명()

6. 객체의 소멸

	1) 자바에서는 객체를 생성하는 new 연산자는 있지만, 
		객체를 소멸시키는 연산자는 없다.
		-> 개발자가 마음대로 객체 소멸 시킬 수 없다. (메모리해제X)

	2) 객체 소멸 : new에 의해 생성된 객체 공간을
		JVM에게 돌려주어 가용 메모리에 포함시키는 것.

	3) 자바에서는 이렇게 사용되지 않는 객체메모리(가비지)를
		JVM의 가비지컬렉터가 적절한 시점에 자동으로 수거하여
		메모리를 해제 시킨다.

7. 가비지

	1) 더이상 사용되지 앟는 객체나 배열메모리를 칭함
	2) 참조하는 레퍼런스가 하나도 없는 객체나 배열을 가비지로 판단.

		a = new Person("김피카츄");
		b = new Person("박꼬부기");

		b = a;
		--> a = 김피카츄, b = 김피카츄

		a = null;
		b = null;

8. 가비지 컬렉션 Garbage Collection

	1) 가비지가 많으면 사용할 수 있는 (가용)메모리가 줄어든다.
		-> 메모리가 부족하면 프로그램 실행X
		-> 자바 플랫폼은 가용메모리가 일정 크기 이하로 줄어들면
		자동으로 가비지 회수한다.
	2) 가비지 컬렉션은 가비지 컬렉션 스레드(일꾼)에 의해 처리된다.
	3) 자바 플랫폼 내부의 판단에 의해 실행되므로,
		언제 가비지 컬렉션이 수행되는 지 알기 어렵다.
	4) 단점 : 가비지 컬렉터가 실행되면 응용프로그램은 실행을 멈추고 기다린다.
		-> 실시간 처리 응용프로그램으로 부적합 -> ex. 실시간 온라인 게임
	5) 강제 요청은 System 또는 Runtime 객체의 gc() 메서드를 호출하면
		요청할 수 있으나 즉시 작동하지는 않는다.

9. 접근지정자 modifier

	1) 객체 지향 언어는 접근 지정자를 두고 있다.
		객체를 캡슐화하기 때문에,
		객체에 다른 객체가 접근하는 것을 허용할지 말지를
		지정할 필요가 있기 때문이다.

	2) 패키지 package
		자바는 서로 관련있는 클래스 파일들을 패키지에 저장하여 관리
		패키지 : 디렉토리 or 폴더 개념

	3) 자바의 4가지 접근지정자
		
	# 클래스 접근 지정자 : 다른 클래스에서 이 클래스를 활용할 수 있는지 
				허용 여부 지정.

		1. public 클래스
			: 패키지에 상관없이 다른 어떤 클래스에서도 사용이 허용됨

			public class 클래스명 {  }

		2. default 클래스 (접근지정자 생략)
			: 같은 패키지 내의 클래스에게만 사용이 허용됨.

			class 클래스명 {  }

	# 멤버 접근 지정자
	private < default < protected < public 순으로 공개범위 넓어짐.

	-------------------------------------------------------------------
	멤버에 접근하는 클래스	| 멤버 접근 지정자
			        | private  |   default    |   protected   |   public 
	--------------------------------------------------------------------------------
	같은 패키지의 클래스	|    X	   |      O       |       O       |      O
	--------------------------------------------------------------------------------
	다른 패키지의 클래스	|    X	   |      X	  |       X	  |      O
	--------------------------------------------------------------------------------
	접근 가능 영역		| 클래스내 | 동일패키지내 | 동일패키지내, | 모든 클래스  
			        |          |		  |  자식 클래스  |
	--------------------------------------------------------------------------------	

	1. public 멤버
		: 모든 클래스에서 접근 가능
		
		public 타입 변수명;
		public 리턴타입 메서드명() { ... }

	2. private 멤버
		: 비공개, 같은 클래스 내의 멤버들에게만 접근 허용

		private 타입 변수명
		private 리턴타입 메서드명() { ... }

	3. protected 멤버
		: 보호된 공개, 같은 패키지의 모든 클래스와
		다른 패키지라도 자식클래스라면 접근 허용 -> 상속유도

		protected 타입 변수명
		protected 리턴타입 메서드명() { ... }

	4. default 멤버 (접근지정자 생략)
		: 동일한 패키지내 클래스들에게 접근 혀용

		타입 변수명
		리턴타입 메서드명() { ... }

	4) 캡슐화 encapsulation (자바가 추구하는 코딩 형태)

		변수 : private
		메서드 : public

		--> getter/setter
			get변수명() : 데이터 꺼내기
			set변수명() : 데이터 대입

		private String name;
		public String getName() { return name; }
		public void setName(String name) { this.name = name; }








